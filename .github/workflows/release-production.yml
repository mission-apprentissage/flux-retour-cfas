name: Release version production
on:
  push:
    branches: [master]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-node@v1
        with:
          node-version: 16.6.0
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Run yarn Install
        run: yarn install

      - name: bump
        run: yarn npm:release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  back-merge:
    needs: release
    # avoids buggy Github Actions behaviour triggering infinite loop of release commits
    if: "startsWith(github.event.head_commit.message, 'chore(release')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Merge master -> develop
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          from_branch: master
          target_branch: develop
          github_token: ${{ secrets.GH_TOKEN }}
  ciserver:
    needs: release
    # avoids buggy Github Actions behaviour triggering infinite loop of release commits
    if: "!startsWith(github.event.head_commit.message, 'chore(release')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 16.6.0
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-

      # Install dependencies
      - name: Run yarn Install
        run: yarn install

      # Install ui dependencies
      - name: Run yarn Install ui
        run: yarn --cwd ui install --frozen-lockfile

      # Install yarn dependencies
      - name: Run yarn Install server
        run: yarn --cwd server install --frozen-lockfile

      # Lint
      - name: Run Lint
        run: yarn lint

      # # Run mocha tests
      # - name: Run Tests
      #   run: |
      #     yarn --cwd server test:coverage
      #   env:
      #     FLUX_RETOUR_CFAS_API_KEY: ${{ secrets.FLUX_RETOUR_CFAS_API_KEY }}
      #     FLUX_RETOUR_CFAS_AUTH_PASSWORD_HASH_ROUNDS: ${{ secrets.FLUX_RETOUR_CFAS_AUTH_PASSWORD_HASH_ROUNDS }}
      #     FLUX_RETOUR_CFAS_AUTH_USER_JWT_SECRET: ${{ secrets.FLUX_RETOUR_CFAS_AUTH_USER_JWT_SECRET }}
      #     FLUX_RETOUR_CFAS_AUTH_PDS_JWT_SECRET: ${{ secrets.FLUX_RETOUR_CFAS_AUTH_PDS_JWT_SECRET }}
      #     FLUX_RETOUR_CFAS_AUTH_ACTIVATION_JWT_SECRET: ${{ secrets.FLUX_RETOUR_CFAS_AUTH_ACTIVATION_JWT_SECRET }}
      #     FLUX_RETOUR_CFAS_AUTH_PASSWORD_JWT_SECRET: ${{ secrets.FLUX_RETOUR_CFAS_AUTH_PASSWORD_JWT_SECRET }}

      # # codecov
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v2
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     directory: ./server/coverage
      #     name: codecov-server
      #     verbose: true

  ciui:
    needs: release
    # avoids buggy Github Actions behaviour triggering infinite loop of release commits
    if: "!startsWith(github.event.head_commit.message, 'chore(release')"
    runs-on: ubuntu-latest
    steps:
      # Checks-out the repository
      - uses: actions/checkout@v2

      # Install dependencies
      - name: Run Yarn Install
        run: |
          yarn --cwd ui install

      # Run tests
      - name: Run Tests
        run: |
          yarn --cwd ui test:coverage

      # codecov
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v2
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     directory: ./ui/coverage
      #     name: codecov-ui
      #     verbose: true
