---
- name: "[{{ pr_number }}] Get Pull Request Infos"
  ansible.builtin.shell: curl -s https://api.github.com/repos/mission-apprentissage/{{repo_name}}/pulls/{{ pr_number }}
  register: result

- name: "[{{ pr_number }}] Save Pull Requests Infos"
  set_fact:
    pr_commit_id: "{{ result.stdout | from_json | json_query('head.sha') }}"
    pr_title: "{{ result.stdout | from_json | json_query('title') }}"
    pr_state: "{{ result.stdout | from_json | json_query('state') }}"

- name: "[{{ pr_number }}] Deploying preview"
  when:
    - pr_state == 'open'
    - build == true
  block:
    - name: "[{{ pr_number }}] création du répertoire de build"
      file:
        path: /opt/app/projects/{{ pr_number }}
        state: directory
        owner: root
        group: root
        mode: 770

    - name: "[{{ pr_number }}] copy server env file"
      ansible.builtin.copy:
        content: "{{ lookup('ansible.builtin.template', '../.env_server') }}"
        dest: "/opt/app/projects/{{ pr_number }}/.env_server"

    - name: "[{{ pr_number }}] copy ui env file"
      ansible.builtin.copy:
        content: "{{ lookup('ansible.builtin.template', '../.env_ui') }}"
        dest: "/opt/app/projects/{{ pr_number }}/.env_ui"

    - name: "[{{ pr_number }}] creation du fichier docker compose"
      ansible.builtin.template:
        src: "{{inventory_dir}}/docker-compose.preview.yml"
        dest: "/opt/app/projects/{{ pr_number }}/docker-compose.yml"

    - name: "Check if repository exists"
      stat:
        path: "/opt/app/repository"
      register: check_stat

    - name: "Pruning repository references"
      shell:
        chdir: "/opt/app/repository"
        cmd: git remote prune origin
      when: check_stat.stat.exists

    - name: "[{{ pr_number }}] Clone du repository"
      git:
        repo: "git@github.com:mission-apprentissage/{{repo_name}}.git"
        version: "{{ pr_commit_id }}"
        force: yes
        accept_newhostkey: yes
        dest: /opt/app/repository

    - name: "[{{ pr_number }}] Root only pour tous les répertoires applicatifs"
      file:
        path: "{{item}}"
        state: directory
        owner: root
        group: root
        mode: 770
      with_items:
        - "/opt/app/repository"

    - name: "[{{ pr_number }}] Build local images 0.0.0-{{ pr_number }}"
      shell:
        cmd: ".bin/mna-tdb preview:build 0.0.0-{{ pr_number }} load preview"
        chdir: /opt/app/repository
      async: 900 # max 15 minutes
      poll: 15 # check every 15s

    - name: "[{{ pr_number }}] Start Application"
      shell:
        chdir: "/opt/app/projects/{{ pr_number }}"
        cmd: docker compose up -d --remove-orphans --wait

    - name: "[{{ pr_number }}] Trigger ACME companion"
      shell:
        chdir: /opt/app
        cmd: docker exec nginx-proxy-acme /app/force_renew

    - name: "[{{ pr_number }}] Execute MongoDB migrations"
      shell:
        chdir: "/opt/app/projects/{{ pr_number }}"
        cmd: "docker compose run --rm server yarn cli migrations:up"

    - name: "[{{ pr_number }}] Seed database"
      shell:
        chdir: "/opt/app"
        cmd: "/opt/app/scripts/seed.sh preview_{{ pr_number | default('00') }}"

    - name: "[{{ pr_number }}] Preview URL"
      debug:
        msg: "{{ vault[env_type].MNA_TDB_PUBLIC_URL }}"

- name: "[{{ pr_number }}] Uninstalling preview"
  when: pr_state != 'open'
  block:
    - name: "[{{ pr_number }}] Check if preview is deployed"
      stat:
        path: "/opt/app/projects/{{ pr_number }}"
      register: check_stat

    - name: "[{{ pr_number }}] Stopping the preview"
      shell:
        chdir: "/opt/app/projects/{{ pr_number }}"
        cmd: docker compose down --remove-orphans	--volumes
      when: check_stat.stat.exists
      ignore_errors: true

    - name: "[{{ pr_number }}] Removing {{ item }}:0.0.0-{{ pr_number }} image"
      shell:
        cmd: "docker image rm -f ghcr.io/mission-apprentissage/{{ item }}:0.0.0-{{ pr_number }}"
      when: check_stat.stat.exists
      loop: "{{ docker_images }}"

    - name: "[{{ pr_number }}] Remove database"
      shell:
        cmd: docker run --rm -i --network mna_network mongo:6.0.2-focal mongosh "{{ vault[env_type].MNA_TDB_MONGODB_URI }}" --eval "db.dropDatabase()"

    - name: "[{{ pr_number }}] Removing preview directory"
      shell:
        cmd: "rm -rf /opt/app/projects/{{ pr_number }}"
      when: check_stat.stat.exists

    - name: "[{{ pr_number }}] Clean Docker"
      shell: docker system prune --force --volumes
